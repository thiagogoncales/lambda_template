# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.6.1
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Pipfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            sudo pip install pipenv
            pipenv install
            pipenv install --dev

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "Pipfile.lock" }}
        
      - run:
          name: run tests
          command: |
            make test

      - store_artifacts:
          path: test-reports
          destination: test-reports

  deploy:
    docker:
      - image: circleci/python:3.6.1

    environment:
      MY_ENV_VAR: "such env var"

    working_directory: ~/repo

    steps:
      - checkout

      # this is slow. build a custom docker image and use that
      - run:
          name: Install node and npm
          command: |
            curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
            sudo apt-get install -y nodejs
            node --version && npm -v

      - run:
          name: Setup serverless
          command: |
              sudo npm i -g serverless
              npm install

      - run:
          name: install dependencies
          command: |
            sudo pip install pipenv

      - run:
          name: Actually deploying
          command: |
            make deploy 

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
